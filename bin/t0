#!/usr/bin/env python
# encoding: utf-8

from WMCore.Configuration import loadConfigurationFile
from T0.RunConfig.RunConfigAPI import getAcquisitionEra
import socket
import sys
import getopt
import traceback
import os
import re

help_message = '''
- t0 --update-t0=<version>           : Uninstalls current T0 to install sepcified T0 version
-
- t0 --start-agent                   : Starts the agent
-
- t0 --stop-agent                    : Stops the agent
-
- t0 --clear-deployment              : Start a new deployment without re-installing the software
-
- t0 --resource-control=<site>       : Adds input site to resource control only for processing jobs
-
- t0 --edit-code=<file>              : Looks for input file within site-packages directory and opens it for edit using vim
-
- t0 --get-tarball=<job id>          : Queries the T0 database for the latest tarball of a given job id. Use for paused jobs for better results
-
- t0 --save-tarball=<tarball path>   : Saves the provided tarball in the PausedJobs directory
-
- t0 --get-and-save-tarball=<job_id> : Performs get-tarball and save-tarball in one
'''

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def start ():
    """
    _start_
    starts the agent
    """
    print("Starting the agent")
    os.system('manage start-agent')

def stop ():
    """
    _stop_
    stops the agent
    """
    print("Stopping the agent")
    os.system('manage stop-agent')

def updateT0 (version):
    """
    _updateT0_
    Updates the T0 version
    """
    deployDir = os.getenv('WMA_DEPLOY_DIR')
    os.system('echo "Stopping Tier0Feeder"')
    os.system('sleep 1')
    os.system('manage execute-agent wmcoreD --shutdown --components Tier0Feeder')
    os.system('echo "Now updating T0"')
    os.system('sleep 2')
    os.system('pip uninstall -y T0')
    os.system('pip install T0=={}'.format(version))
    os.system('chmod +x {}/bin/t0'.format(deployDir))
    os.system('chmod +x {}/etc/Tier0Config.py'.format(deployDir))
    os.system('echo "Restarting Tier0Feeder"')
    os.system('manage execute-agent wmcoreD --restart --components Tier0Feeder')
    os.system('echo "Done"')

def resetCouch ():
    """
    _resetCouch_
    Cleans couchdb relevant directories and starts a new container
    """
    os.system('bash /data/tier0/reset_couch.sh')

def wipeT0ast (userInput='n'):
    """
    _wipeT0ast_
    Cleans T0AST database
    """
    if userInput == 'Y':
        os.system('bash /data/tier0/00_wipe_t0ast.sh')
    else:
        os.system('echo "Not wiping T0AST"')

def clearReplayDeployment (userInput='n'):
    """
    _clearDeployment_
    Avoid re-deploying from scratch when unnecessary
    """
    if userInput != 'Y':
        os.system('echo "Not performing anything"')
        return
    teamname = os.getenv('TEAM')
    print(teamname)
    stop()
    os.system('condor_rm -all')
    resetCouch()
    wipeT0ast(userInput=userInput)
    os.system('rm -rf $WMA_CONFIG_DIR/.init*')
    os.system('rm -rf $WMA_INSTALL_DIR/*')
    os.system('rm -rf /data/tier0/admin/Specs/*')
    os.system('echo "Done. Agent is ready to start"')
    init()

def init ():
    """
    _init_
    Runs the init.sh script
    """
    os.system('bash /data/tier0/initialize.sh -R')

def addProcessingSite(site=None):
    """
    _resourceControl_
    Adds site to the resource control
    """
    addSiteCmd = f"manage execute-agent wmagent-resource-control --pending-slots=10000 --running-slots=10000 --plugin=SimpleCondorPlugin --add-one-site {site}"
    os.system(addSiteCmd)


def setAgentName(agentName):
    """
    Sets the agentName parameter of the Tier0Feeder, if such parameter does not exist
    """
    configPath = '/data/tier0/WMAgent.venv3/srv/wmagent/current/config/config.py'
    sys.path.append('/data/tier0/WMAgent.venv3/srv/wmagent/current/config')
    import config
    if config.config.Tier0Feeder.agentName and config.config.Tier0Feeder.agentName is not None:
        os.system('echo "This agent already has an assigned name and this must not be changed"')
        return
    else:
        os.system('echo "Your agent is now a {}"'.format(agentName))
        with open(configPath, "a") as f:
            f.write(f'\nconfig.Tier0Feeder.agentName = "{agentName}"\n')

    return

def saveTarball(originTarballPath, destinationTarballPath):
    os.system('mkdir -p {}'.format(destinationTarballPath))

    originTarballPath = originTarballPath.strip()
    destinationTarballPath = destinationTarballPath.strip()

    os.system('cp "{}" "{}"'.format(originTarballPath, destinationTarballPath))
    os.system('echo "The tarball is saved in {}"'.format(destinationTarballPath))
    return

def setDestinationPath(tier0Config, originTarballPath):
    """
    Construct the destination path for the tarball
    The final path has the form of:
    /eos/user/c/cmst0/public/PausedJobs/<run>/<PrimaryDataset>/<error (optional)>/tarball.tar.gz
    """
    pds = dir(tier0Config.Datasets)
    basePath = '/eos/user/c/cmst0/public/PausedJobs'

    try:
        runString = re.search(r'Run(\d{6})', originTarballPath).group(1)
        run = int(runString)
        acqEra = getAcquisitionEra(tier0Config, run)
        eraRunPath = basePath + '/' + acqEra + '/' + runString 

    except:
        acqEra = getAcquisitionEra(tier0Config, 999999)
        eraRunPath = basePath + '/' + acqEra + '/' + 'noRunSpecified'

    pdPathUpdated = False
    for pd in pds:
        if pd in originTarballPath:
            eraRunPdPath = eraRunPath + '/' + pd
            pdPathUpdated = True
            break
    if not pdPathUpdated:
        destinationPath = eraRunPath
    else:
        destinationPath = eraRunPdPath
        
    print('Tarball will be saved in {}'.format(destinationPath))
    return destinationPath


def main(argv=None):
    if argv is None:
        argv = sys.argv

    try:
        try:
            opts, args = getopt.getopt(argv[1:], "h",
            ["help", "update-t0=", "start-agent", "stop-agent", "reset-couch", "clear-replay-deployment", "resource-control=", "get-tarball=", "save-tarball=", "get-and-save-tarball=", "set-agent-name="])

        except getopt.error as msg:
            raise Usage(msg)

        # option processing
        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message)
            
            if option == "--update-t0":
                updateT0(value)

            if option == "--start-agent":
                start()

            if option == "--stop-agent":
                stop()
            
            if option == "--reset-couch":
                resetCouch()

            if option == "--clear-replay-deployment":
                node = socket.gethostname()
                if node in ['vocms047.cern.ch', 'vocms0500.cern.ch', 'vocms05011.cern.ch', 'vocms05012.cern.ch']:
                    os.system('echo "This will clear previous deployment. Are you sure you wish to proceed? (Y/n)"')
                    userInput = input()
                    clearReplayDeployment(userInput=userInput)
                else:
                    os.system('echo "This method is not supported for the current hostname"')

            if option == "--resource-control":
                site = value
                addProcessingSite(site)

            if option == "--get-tarball":
                job = value
                os.system('bash -ic "tarball {} | grep tar.gz"'.format(job))

            if option == "--save-tarball":
                originTarball = '/eos/cms/tier0' + value
                tier0Config = loadConfigurationFile('/data/tier0/admin/ProdOfflineConfiguration.py')
                destTarballPath = setDestinationPath(tier0Config, originTarball)
                saveTarball(originTarball, destTarballPath)

            if option == "--get-and-save-tarball":
                job = value
                print('getting tarball for job {}'.format(job))
                stream = os.popen('bash -ic "tarball {} | grep tar.gz"'.format(job))
                lfnTarball = stream.read()
                stream.close()
                pfnTarball = '/eos/cms/tier0' + lfnTarball
                print('Now saving the tarball {}'.format(pfnTarball))
                tier0Config = loadConfigurationFile('/data/tier0/admin/ProdOfflineConfiguration.py')
                destTarballPath = setDestinationPath(tier0Config, pfnTarball)
                saveTarball(pfnTarball, destTarballPath)

            if option == "--set-agent-name":
                agentName = value
                print('setting agent name to "{}"'.format(agentName))
                setAgentName(agentName=agentName)


    except Usage as err:
        print(sys.argv[0].split("/")[-1] + ": " + str(err.msg), file=sys.stderr)
        print("\t for help use --help", file=sys.stderr)
        return 2

if __name__ == "__main__":
    sys.exit(main())

